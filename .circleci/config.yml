version: 2.1

orbs:
  docker: circleci/docker@2.1.4
  aws-cli: circleci/aws-cli@4.0.0
  snyk: snyk/snyk@2.3.0

# Commands - reusable sets of steps
commands:
  maven_install:
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

jobs:
  secrets_scan_local:
    docker:
      - image: zricethezav/gitleaks:latest
    steps:
      - checkout
      - run:
          name: Run gitleaks scan (local files only)
          # --source . : scan current directory and all subdirectories
          # --no-git : do not scan git history
          command: gitleaks detect --source . --no-git
  build:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - maven_install
      - run:
          name: Build Package
          command: mvn clean package -DskipTests
      - persist_to_workspace:
          root: .
          paths:
            - target/
            - Dockerfile
            - .dockerignore
            - .mvn/
            - mvnw
            - mvnw.cmd
            - pom.xml
            - src/

  # Snyk Static Application Security Testing (code scan)
  snyk_sast:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - snyk/scan:
          command: code test
          fail-on-issues: false
          severity-threshold: medium


  test:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - maven_install
      - run:
          name: Run Tests
          command: mvn test

  scan:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - setup_remote_docker
      - docker/check:
          docker-username: DOCKER_USER
          docker-password: DOCKER_PASSWORD
      - run: docker build -t $DOCKER_IMAGE .
      - snyk/scan:
          docker-image-name: $DOCKER_IMAGE
          fail-on-issues: false
          severity-threshold: medium

  publish:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - docker/check:
          docker-username: DOCKER_USER
          docker-password: DOCKER_PASSWORD
      - docker/build:
          image: $DOCKER_IMAGE
          tag: << pipeline.git.revision >>,latest
      - docker/push:
          image: $DOCKER_IMAGE
          tag: << pipeline.git.revision >>,latest
  deploy:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup
      - docker/check:
          docker-username: DOCKER_USER
          docker-password: DOCKER_PASSWORD
      - run:
          name: Deploy to AWS Elastic Beanstalk
          command: |
            echo "Deploying application to AWS Elastic Beanstalk..."
            # Pull the built Docker image
            docker pull $DOCKER_IMAGE:<< pipeline.git.revision >>
            # Tag the image for ECR
            docker tag $DOCKER_IMAGE:<< pipeline.git.revision >> $AWS_ECR_REGISTRY:<< pipeline.git.revision >>
            # Login to ECR
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
            # Push to ECR
            docker push $AWS_ECR_REGISTRY:<< pipeline.git.revision >>
            # Create Dockerrun.aws.json for EB
            echo '{
              "AWSEBDockerrunVersion": "1",
              "Image": {
                "Name": "'$AWS_ECR_REGISTRY':<< pipeline.git.revision >>",
                "Update": "true"
              },
              "Ports": [
                {
                  "ContainerPort": "8080"
                }
              ]
            }' > Dockerrun.aws.json
            # Create application version
            aws elasticbeanstalk create-application-version \
              --application-name babypal-backend \
              --version-label << pipeline.git.revision >> \
              --source-bundle S3Bucket=elasticbeanstalk-ap-southeast-1-$AWS_ACCOUNT_ID,S3Key=babypal-backend/<< pipeline.git.revision >>.zip \
              --region $AWS_DEFAULT_REGION || \
            aws s3 cp Dockerrun.aws.json s3://elasticbeanstalk-ap-southeast-1-$AWS_ACCOUNT_ID/babypal-backend/<< pipeline.git.revision >>.zip && \
            aws elasticbeanstalk create-application-version \
              --application-name babypal-backend \
              --version-label << pipeline.git.revision >> \
              --source-bundle S3Bucket=elasticbeanstalk-ap-southeast-1-$AWS_ACCOUNT_ID,S3Key=babypal-backend/<< pipeline.git.revision >>.zip \
              --region $AWS_DEFAULT_REGION
            # Update EB environment with new version
            aws elasticbeanstalk update-environment \
              --environment-name $EB_ENVIRONMENT_NAME \
              --version-label << pipeline.git.revision >> \
              --region $AWS_DEFAULT_REGION

workflows:
  workflow-develop:
    jobs:
      - secrets_scan_local:
          filters:
            branches:
              only: develop
      - build:
          filters:
            branches:
              only: develop
      - test:
          requires:
            - build
          filters:
            branches:
              only: develop
      - snyk_sast:
          requires:
            - build
          filters:
            branches:
              only: develop
      - scan:
          requires:
            - build
          filters:
            branches:
              only: develop
      - publish:
          requires:
            - test
            - scan
          filters:
              branches:
                only: develop

  workflow-release:
    jobs:
      - secrets_scan_local:
          filters:
            branches:
              only: release
      - build:
          filters:
            branches:
              only: release
      - test:
          requires:
            - build
          filters:
            branches:
              only: release
      - scan:
          requires:
            - build
          filters:
            branches:
              only: release
      - snyk_sast:
          requires:
            - build
          filters:
            branches:
              only: release
      - publish:
          requires:
            - test
          filters:
              branches:
                only: release
      - deploy:
          requires:
            - publish
            - scan
            - snyk_sast
          filters:
              branches:
                only: release
